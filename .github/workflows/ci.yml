name: Organization CI

on:
  pull_request:
    branches: [main]
    # 특정 디렉토리의 파일이 변경되었을 때에만 워크플로우 실행
    paths:
      - "operation-team-account/**"
      - "identity-team-account/**"
      - "prod-team-account/**"
      - "dev-team-account/**"
      - "security-team-account/**"
      - "stage-team-account/**"
      - "management-team-account/**"

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      # git repository code 가져오기
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 최신 origin/main 브랜치 가져오기
      - name: Fetch origin/main
        run: git fetch origin main

      # 변경된 디렉토리를 감지하고 matrix 형태로 저장
      - name: Detect Changed Directories & Build Matrix
        id: set
        run: |
          FILES=$(git diff --name-only origin/main...${{ github.sha }})
          echo "Changed files:"
          echo "$FILES"
          # 각 디렉토리에 대응하는 assume role key 정의
          declare -A ROLE_MAP=(
            ["operation-team-account"]="ROLE_ARN_OPERATION"
            ["identity-team-account"]="ROLE_ARN_IDENTITY"
            ["prod-team-account"]="ROLE_ARN_PROD"
            ["dev-team-account"]="ROLE_ARN_DEV"
            ["security-team-account"]="ROLE_ARN_SECURITY"
            ["stage-team-account"]="ROLE_ARN_STAGE"
            ["management-team-account"]="ROLE_ARN_MANAGEMENT"
          )

          MATRIX_ITEMS=()

          # 변경된 디렉토리에 따라 matrix 구성
          for DIR in "${!ROLE_MAP[@]}"; do
            if echo "$FILES" | grep -q "^$DIR/"; then
              ROLE_KEY="${ROLE_MAP[$DIR]}"
              MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"$ROLE_KEY\"}")
            fi
          done

          # 변경 없으면 빈 matrix 반환
          if [ ${#MATRIX_ITEMS[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON="[$(IFS=,; echo "${MATRIX_ITEMS[*]}")]"
            echo "matrix=$JSON" >> $GITHUB_OUTPUT
          fi

  terraform-ci:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    env:
      INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      INFRACOST_TERRAFORM_CLI_WRAPPER: false

    steps:
      # 변경된 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # (OIDC 기반) AWS 자격 증명 구성
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets[matrix.role_key] }}

      # tfsec 설치
      - name: Install tfsec
        run: |
          curl -sSL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

      # tfsec 실행(High 이상의 취약점이 있으면 실패 처리)
      - name: Run tfsec (fail on HIGH+)
        run: tfsec --minimum-severity HIGH --no-color ${{ matrix.dir }}

      # Terraform 설치
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      # Terraform 초기화
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.dir }}

      # Terraform 코드 포맷 확인
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.dir }}

      # Terraform 문법 유효성 검사
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.dir }}

      # Terraform plan 및 plan 파일 생성, 출력
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan.binary
          terraform show -no-color tfplan.binary > plan.txt
          terraform show -json tfplan.binary > plan.json
          echo 'PLAN<<EOF' >> $GITHUB_OUTPUT
          cat plan.txt >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        working-directory: ${{ matrix.dir }}

      # Terraform plan 결과를 PR의 댓글로 출력
      - name: Comment Terraform Plan on PR
        if: github.event.pull_request.number != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ### Terraform Plan Output for `${{ matrix.dir }}`
            ```hcl
            ${{ steps.plan.outputs.PLAN }}
            ```
      # Infracost 설치
      - name: Setup Infracost
        uses: infracost/actions/setup@v2

      # Terraform plan.json 기반으로 비용 분석
      - name: Infracost Breakdown
        run: |
          infracost breakdown \
            --path=plan.json \
            --format=json \
            --out-file=infracost.json
        working-directory: ${{ matrix.dir }}

      # Infracost 결과를 PR 댓글로 작성
      - name: Infracost Comment on Pull Request
        uses: infracost/actions/comment@v1
        with:
          path: ${{ matrix.dir }}/infracost.json
          behavior: update
