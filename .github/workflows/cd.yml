name: Terraform Apply

on:
  push:
    branches: [main] # main 브랜치에 push될 때 실행

permissions:
  contents: read # 코드 리포지토리 읽기 권한
  id-token: write # OIDC 인증을 위한 ID 토큰 발급 권한

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }} # 다음 job에 전달할 matrix 출력
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # 현재 리포지토리 코드 체크아웃

      - name: Filter Paths
        id: filter
        uses: dorny/paths-filter@v3 # 어떤 디렉토리에 변경이 있는지 필터링
        with:
          filters: |
            operation:
              - 'operation-team-account/**'
            identity:
              - 'identity-team-account/**'
            prod:
              - 'prod-team-account/**'
            dev:
              - 'dev-team-account/**'
            security:
              - 'security-team-account/**'
            stage:
              - 'stage-team-account/**'
            management:
              - 'management-team-account/**'

      - name: Build Matrix from Filter (with subdirs)
        id: set
        env:
          # 필터링된 결과를 환경변수로 받아옴
          FILTER_OUTPUTS_operation: ${{ steps.filter.outputs.operation }}
          FILTER_OUTPUTS_identity: ${{ steps.filter.outputs.identity }}
          FILTER_OUTPUTS_prod: ${{ steps.filter.outputs.prod }}
          FILTER_OUTPUTS_dev: ${{ steps.filter.outputs.dev }}
          FILTER_OUTPUTS_security: ${{ steps.filter.outputs.security }}
          FILTER_OUTPUTS_stage: ${{ steps.filter.outputs.stage }}
          FILTER_OUTPUTS_management: ${{ steps.filter.outputs.management }}
        run: |
          # 계정 별 IAM Role Key 매핑
          declare -A ROLE_MAP=(
            ["operation"]="ROLE_ARN_OPERATION"
            ["identity"]="ROLE_ARN_IDENTITY"
            ["prod"]="ROLE_ARN_PROD"
            ["dev"]="ROLE_ARN_DEV"
            ["security"]="ROLE_ARN_SECURITY"
            ["stage"]="ROLE_ARN_STAGE"
            ["management"]="ROLE_ARN_MANAGEMENT"
          )

          MATRIX_ITEMS=()

          # 변경된 경로에 따라 matrix 구성
          for KEY in "${!ROLE_MAP[@]}"; do
            VAR_NAME="FILTER_OUTPUTS_${KEY}"
            VALUE="${!VAR_NAME}"

            if [ "$VALUE" = "true" ]; then
              BASE_DIR="${KEY}-team-account"
              # 하위 디렉토리 순회 (단, .terraform은 제외)
              for DIR in $(find $BASE_DIR -type d -mindepth 1); do
                if [[ "$DIR" != *".terraform"* ]]; then
                  MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"${ROLE_MAP[$KEY]}\"}")
                fi
              done
            fi
          done

          # 최종 matrix JSON 출력
          if [ ${#MATRIX_ITEMS[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON="[$(IFS=,; echo "${MATRIX_ITEMS[*]}")]"
            echo "matrix=$JSON" >> $GITHUB_OUTPUT
          fi

  terraform-apply:
    needs: detect-changes # detect-changes job 이후 실행
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }} # 변경사항이 있을 경우에만 실행
    runs-on: ubuntu-latest

    strategy:
      matrix: # matrix 기반 반복 실행
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false # 하나 실패해도 나머지 job은 계속 진행

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets[matrix.role_key] }} # OIDC 기반으로 계정별 IAM Role Assume

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0 # Terraform 버전 명시

      - name: Terraform Init
        run: terraform init # Terraform 초기화: 백엔드 설정 및 provider 다운로드
        working-directory: ${{ matrix.dir }} # matrix로 전달된 디렉토리에서 실행

      - name: Terraform Apply
        run: terraform apply -auto-approve # 사용자 승인 없이 자동 적용
        working-directory: ${{ matrix.dir }}
