name: Terraform Apply

on:
  push:
    branches: [main]

permissions:
  contents: read
  id-token: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Filter Paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            operation:
              - 'operation-team-account/**'
            identity:
              - 'identity-team-account/**'
            prod:
              - 'prod-team-account/**'
            dev:
              - 'dev-team-account/**'
            security:
              - 'security-team-account/**'
            stage:
              - 'stage-team-account/**'
            management:
              - 'management-team-account/**'

      - name: Build Matrix from Filter (with subdirs)
        id: set
        env:
          FILTER_OUTPUTS_operation: ${{ steps.filter.outputs.operation }}
          FILTER_OUTPUTS_identity: ${{ steps.filter.outputs.identity }}
          FILTER_OUTPUTS_prod: ${{ steps.filter.outputs.prod }}
          FILTER_OUTPUTS_dev: ${{ steps.filter.outputs.dev }}
          FILTER_OUTPUTS_security: ${{ steps.filter.outputs.security }}
          FILTER_OUTPUTS_stage: ${{ steps.filter.outputs.stage }}
          FILTER_OUTPUTS_management: ${{ steps.filter.outputs.management }}
        run: |
          declare -A ROLE_MAP=(
            ["operation"]="ROLE_ARN_OPERATION"
            ["identity"]="ROLE_ARN_IDENTITY"
            ["prod"]="ROLE_ARN_PROD"
            ["dev"]="ROLE_ARN_DEV"
            ["security"]="ROLE_ARN_SECURITY"
            ["stage"]="ROLE_ARN_STAGE"
            ["management"]="ROLE_ARN_MANAGEMENT"
          )

          MATRIX_ITEMS=()

          for KEY in "${!ROLE_MAP[@]}"; do
            VAR_NAME="FILTER_OUTPUTS_${KEY}"
            VALUE="${!VAR_NAME}"

            if [ "$VALUE" = "true" ]; then
              BASE_DIR="${KEY}-team-account"

              # 루트 디렉터리 검사
              TF_COUNT_ROOT=$(find "$BASE_DIR" -maxdepth 1 -name '*.tf' | wc -l)
              if [ "$TF_COUNT_ROOT" -gt 0 ]; then
                MATRIX_ITEMS+=("{\"dir\":\"$BASE_DIR\",\"role_key\":\"${ROLE_MAP[$KEY]}\"}")
              fi

              # 하위 디렉터리 검사
              for DIR in $(find $BASE_DIR -type d -mindepth 1); do
                if [[ "$DIR" != *".terraform"* && "$DIR" != "$BASE_DIR/modules" ]]; then
                  TF_COUNT=$(find "$DIR" -maxdepth 1 -name '*.tf' | wc -l)
                  if [ "$TF_COUNT" -gt 0 ]; then
                    MATRIX_ITEMS+=("{\"dir\":\"$DIR\",\"role_key\":\"${ROLE_MAP[$KEY]}\"}")
                  fi
                fi
              done
            fi
          done

          if [ ${#MATRIX_ITEMS[@]} -eq 0 ]; then
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            JSON="[$(IFS=,; echo "${MATRIX_ITEMS[*]}")]"
            echo "matrix=$JSON" >> $GITHUB_OUTPUT
          fi

  terraform-apply:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '[]' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          role-to-assume: ${{ secrets[matrix.role_key] }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.0

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.dir }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ${{ matrix.dir }}
